# Guia Pr√°tico Git e GitHub para iniciantes

## Windows



- Introdu√ß√£o

1 ‚Äì Defini√ß√£o de GIT e Objetivo

2 ‚Äì Defini√ß√£o de GITHUB e Objetivo

3 ‚Äì  Instala√ß√£o e Configura√ß√£o do Git e GitHub

4 ‚Äì Comandos B√°sicos do GIT para Windows

5 ‚Äì GIT e GITHUB na pr√°tica

 

- Introdu√ß√£o


 Vamos apresentar nesse e-book um guia pr√°tico sobre GIT e GITHUB para facilitar o estudo de quem est√° iniciando na carreira de programador de sistemas ou desenvolvimento de softwares. Esperamos contribuir com o aprendizado e levar seu conhecimento a um patamar elevado de forma simples e pr√°tica. Como requisitos para utilizar Git e GitHub, primeiramente atualize o JAVA no seu sistema (eu penei at√© descobrir que meu problema era falta de atualiza√ß√£o do Java üòä!! Vamos l√°!!

1 ‚Äì GIT

1.1 -  Defini√ß√£o de Git

Git √© um sistema de controle de vers√£o (VCS) usados por desenvolvedores de softwares para rastrear e controlar altera√ß√µes no c√≥digo-fonte, arquivos de configura√ß√£o e documenta√ß√£o durante o processo de cria√ß√£o de um projeto. 

1.2 ‚Äì O Git objetiva acompanhar o versionamento do projeto e tem como objetivo possibilitar corre√ß√µes, sendo poss√≠vel reverter para vers√£o anterior em caso de erro, principalmente quando o projeto √© desenvolvido em equipe. O GIT armazena todo o hist√≥rico de altera√ß√µes em um banco de dados chamado ‚ÄúReposit√≥rio‚Äù. Nesse reposit√≥rio todos os arquivos s√£o armazenados de forma segura. O Git cria tamb√©m um subdiret√≥rio que armazena o hist√≥rico do projeto. Ao finalizar cada parte de um projeto, este dar√° como resultado um COMMIT, que ficar√° gravado e ser√° acessado sempre que o projeto for reiniciado para altera√ß√µes ou corre√ß√µes. Dessa forma, os devs poder√£o achar com facilidade qual versionamento corresponde cada altera√ß√£o, a medida que quando essas informa√ß√µes s√£o salvas elas possuem um nome que identifica exatamente o tipo de altera√ß√£o ocorrida.

2 ‚Äì GitHub

2.1 ‚Äì Defini√ß√£o de GitHub

O GitHub √© um servidor onde os projetos s√£o armazenados em um reposit√≥rio, por√©m √© um SERVIDOR REMOTO, possibilitando acesso de outros interessados, como membros da equipe ou estudantes. √â uma plataforma gratuita para uso em projetos de c√≥digo aberto. Essa plataforma ganhou visibilidade em 2013, quando atingiu 10 milh√µes de reposit√≥rios. Atualmente, acredita-se que todos os desenvolvedores possuem um espa√ßo no GitHub para mostrar o seu trabalho e possibilita a intera√ß√£o com outros desenvolvedores, empresas e estudantes, pois se assemelha a uma rede social, por√©m com um grupo espec√≠fico ‚Äì os devs!!

2.2 ‚Äì Objetivo do GitHub

O objetivo do GitHub √© servir de reposit√≥rio remoto para os projetos e facilitar o controle do versionamento, uma vez que o projeto poder√° ser manipulado por diversos desenvolvedores. A plataforma GitHub, por ser composta por desenvolvedores, possibilita o conhecimento, desenvolvimento, troca de informa√ß√µes, parceiras e tamb√©m como base para recrutamento por grandes empresas. Ent√£o, se voc√™ √© um Desenvolvedor ou est√° pensando em ser, Git e GitHub ser√£o seus tutores! E como o GitHub se liga ao Git? O desenvolvedor ‚Äújoga‚Äù os  COIMMITs do Git, por meio de determinados comandos, ao GitHub que guardar√° o projeto e cada altera√ß√£o ser√° versionada.

 

3 ‚Äì Instala√ß√£o E Configura√ß√£o do Git  e GitHub no Windows

 

3.1 - Instala√ß√£o E Configura√ß√£o do Git no Windows

Primeiramente, vamos conhecer como surgiu o Git. Os desenvolvedores do Linux projetaram o Git, que vem instalado no Linux e Mac OSX, por√©m alguns desenvolvedores descontentes com algumas funcionalidades, desenvolveram o Projeto de C√≥digo Aberto Git para Windows, da√≠ alguns comandos serem diferentes entre os sistemas operacionais, inclusive instala√ß√£o e configura√ß√£o. Dessa forma, oportunizaram que as funcionalidades do Git pudessem ser aproveitadas em Windows. Para configurar o Git no Windows vamos utilizar o Git Bash, que simula o ambiente Linux no Windows, al√©m de outras configura√ß√µes espec√≠ficas que veremos no decorrer dos estudos.

Em seguida, faremos as configura√ß√µes no GitHub para hospedar o seu primeiro reposit√≥rio e conectar o Git ao GitHub, de forma a lhe assegurar seu primeiro projeto de desenvolvedor!

1¬∫. Instale o Git para Windows, seguindo as configura√ß√µes do seu sistema, no seguinte site : https://git-for-windows.github.io/

2¬∫. Quando o download estiver conclu√≠do, execute o instalador, podendo ser especificado, nesse momento, o local de instala√ß√£o. Recomendo criar um √≠cone na √°rea de trabalho. Certifique-se de selecionar a op√ß√£o ‚ÄúUse Git from Bash Only‚Äù, uma vez que √© o que vamos utilizar no decorrer dos estudos. Tamb√©m recomendo que crie um √≠cone do Git Bash na pares de trabalho, mas poder√° ser utilizado o comando por meio do iniciar do Windows. 

Destaco que o Git √© diferente do GitHub, sendo a maior diferen√ßa o local de reposit√≥rio, onde no Git √© local e no GitHub √© remoto, logo, este √© acess√≠vel ao p√∫blico e possui as seguintes vantagens:

\1.    Controle de Vers√£o;

\2.    Armazenamento na Nuvem;

\3.    Trabalho em Equipe;

\4.    Melhorar seu C√≥digo; e

\5.    Reconhecimento.

 

3.2 - Instala√ß√£o E Configura√ß√£o do GitHub no Windows

O GitHub √© uma plataforma e dever√° ser acessada e criada uma conta no site https://github.com. Oriento que utilize o mesmo e-mail no GitHub e em todos os reposit√≥rios criados no Git!... N√£o se preocupe nesse momento em entender esse passo, apenas use o mesmo e-mail ok?? Agora vamos efetivamente iniciar o projeto!!

4 - Comandos B√°sicos do Git para Windows

Para compreender os comandos b√°sicos para o Git, vamos utilizar um artigo muito simples encontrado no link https://www.codigofonte.com.br/artigos/top-25-comandos-do-git

 

### 1. git config

Quando voc√™ est√° utilizando o Git pela primeira vez ou com uma instala√ß√£o nova, em um projeto colaborativo, esse comando √© fundamental para configurar sua identidade de usu√°rio, inserindo informa√ß√µes como nome e email que ser√£o empregadas em cada *commit*.

Exemplo:

**$ git config ‚Äìglobal user.name ‚ÄúSeu nome‚Äù**

**$ git config ‚Äìglobal user.email ‚ÄúSeu email‚Äù**

### 2. git init

Esse √© o comando que voc√™ ir√° utilizar para criar um novo projeto de git. O comando ir√° criar um reposit√≥rio novo em branco e, a partir da√≠, ser√° poss√≠vel armazenar seu c√≥digo fonte, alterar, salvaguardar altera√ß√µes etc.

Exemplo:

**$ git init**

Se voc√™ j√° possui um reposit√≥rio anterior ou deseja criar um reposit√≥rio com um nome em espec√≠fico, voc√™ pode passar o nome como par√¢metro do comando:

**$ git init <O nome do seu reposit√≥rio>**

### 3. git clone

Esse comando Git cria uma c√≥pia exata de um reposit√≥rio j√° existente.

Ent√£o‚Ä¶ quando usar git init e quando usar git clone? O git clone √© mais avan√ßado, uma vez que ele mesmo executa um comando git init internamente. Al√©m disso, ele verifica todo o conte√∫do do projeto.

Exemplo:

**git clone <URL do seu projeto>**

### 4. git add

[                                                    ](https://codigofonte.com.br/wp-content/uploads/2021/08/git-03.jpg)

Esse comando Git adiciona os arquivos especificados de c√≥digo ao seu reposit√≥rio, sejam arquivos novos ou arquivos anteriores que foram alterados. Oferece diferentes possibilidades de sintaxe.

Exemplo:

**$ git add seu_arquivo** (esse comando ir√° adicionar o arquivo em espec√≠fico ao reposit√≥rio)

**$ git add \*** (esse comando ir√° adicionar todos os arquivos novos e/ou modificados ao reposit√≥rio)

### 5. git commit

√â fundamental se estabelecer uma diferen√ßa entre git add e git commit:

- git add     adiciona seus arquivos modificados √† fila para serem submetidos a um     commit posteriormente. Os arquivos **n√£o** passaram por um commit.
- O git     commit executa o commit dos arquivos que foram adicionados e cria uma nova     revis√£o com um log. Por outro lado, se voc√™ n√£o adicionar nenhum arquivo,     o git n√£o far√° o commit de nada.

√â poss√≠vel combinar as duas a√ß√µes em um √∫nico comando: **$ git commit -a**.

Tamb√©m √© poss√≠vel adicionar uma mensagem para a execu√ß√£o de um commit. Exemplo:

**$ git commit -m ‚Äúseu coment√°rio‚Äù**

### 6. git branch

√â comum na maior parte do tempo possuir m√∫ltiplas varia√ß√µes em seu reposit√≥rio Git, chamadas de *branches* (‚Äúramifica√ß√µes‚Äù). A grosso modo, um *branch* √© um caminho independente de desenvolvimento, uma alternativa.

A princ√≠pio pode parecer f√°cil se perder em diversos caminhos, mas o comando git branch facilita o gerenciamento de tudo isso. Com diferentes par√¢metros, √© poss√≠vel listar, criar ou apagar os *branches.*

Exemplos:

**$ git branch** (lista todas as ramifica√ß√µes)

**$ git branch <nome_do_branch>** (cria um *branch* com o nome especificado)

**$ git branch -d <nome_do_branch>** (deleta o *branch* com o nome especificado)

### 7. git checkout

Ainda sobre *branches*, esse comando Git pode ser utilizado para trocar de uma ramifica√ß√£o para outra.

Exemplo:

**$ git checkout <nome_do_branch>**

Tamb√©m √© poss√≠vel combinar opera√ß√µes, criando e fazendo o checkout de um novo *branch* com um √∫nico comando:

**$ git checkout -b <nome_do_branch_novo>**

## Comandos Git intermedi√°rios

### 8. git remote

O comando Git remote estabelece uma conex√£o entre seu reposit√≥rio local e um reposit√≥rio remoto.

Exemplo:

**$ git remote add <nomecurto> <url>**

### 9. git push

[     ](https://codigofonte.com.br/wp-content/uploads/2021/08/git-04.jpg)

Esse comando serve para subir suas modifica√ß√µes para um reposit√≥rio **remoto** conectado anteriormente com git remote.

Exemplo:

**$ git push -u <nome_curto> <nome_do_branch>**

√â importante especificar a origem e o *upstream* antes de usar o git push. Veja o exemplo:

**$ git push ‚Äìset-upstream <nome_curto> <nome_do_branch>**

### 10. git fetch

Quando voc√™ precisa baixar as mudan√ßas criadas por outros membros do seu projeto colaborativo, voc√™ precisa do comando Git fetch. A partir desse comando, voc√™ ir√° receber todas as informa√ß√µes de commits, para avaliar, antes de aplicar essas altera√ß√µes na sua vers√£o local do reposit√≥rio.

Exemplo:

**$ git fetch**

### 11. git pull

O comando Git pull baixa o conte√∫do (n√£o os metadados) do que foi alterado no reposit√≥rio remoto para o seu reposit√≥rio local e imediatamente atualiza seu contre√∫do para a √∫ltima vers√£o.

Exemplo:

**$ git pull <URL>**

### 12. git stash

[     ](https://codigofonte.com.br/wp-content/uploads/2021/08/git-02.jpg)

Esse comando Git armazena temporariamente seus arquivos modificados em uma √°rea chamada *stash* (‚Äúesconderijo‚Äù), sem interagir com os outros arquivos at√© ser necess√°rio.

Exemplo:

**$ git stash**

Para listar todos os seus ‚Äúesconderijos‚Äù, usamos:

**$ git stash list**

Quando for o momento de aplicar o conte√∫do do *stash* a um *branch*, usamos o par√¢metro ‚Äúapply‚Äù:

**$ git stash apply**

### 13. git show

Quer detalhes espec√≠ficos sobre um commit que o log n√£o mostra? O comando Git show √© a resposta.

Exemplo:

**$ git show <hash_do_commit>**

### 14. git rm

Para remover arquivos da sua pasta, voc√™ pode utilizar o comando Git rm.

Exemplo:

**$ git rm <nome_do_arquivo>**

### 15. git help

Existem in√∫meros comandos no Git, muito mais do que os 25 dessa lista, cada um com sua fun√ß√£o, par√¢metros e caracter√≠sticas. Felizmente, o pr√≥prio Git tem o comando help para trazer ajuda diretamente no terminal.

Exemplo:

**$ git help <comando que se tem d√∫vida>**

### 16. git merge

[     ](https://codigofonte.com.br/wp-content/uploads/2021/08/git-05.jpg)

Esse comando Git integra as mudan√ßas de dois *branches* diferentes em um √∫nico *branch*. Ele precisa ser iniciado a partir de um *branch* j√° selecionado, que ser√° mesclado com outro, com o nome passado por par√¢metro.

Exemplo:

**$ git merge <nome_do_branch>**

## Comandos Git avan√ßados

### 17. git rebase

Git rebase a princ√≠pio parece fazer o mesmo que um comando git merge: ele integra dois *branches* em um *branch* √∫nico. Por√©m, esse comando refaz o hist√≥rico de commits, tornando-o linear. √â o mais indicado para consolidar m√∫ltiplos *branches*.

Exemplo:

**$ git rebase <base>**

### 18. git pull ‚Äìrebase

Essa √© uma varia√ß√£o do comando pull mostrado anteriormente. A partir dessa instru√ß√£o, o Git ir√° fazer um rebase (n√£o um merge) depois de se utilizar um comando pull.

Exemplo:

**$ git pull ‚Äìrebase**

### 19. git cherry-pick

Esse √© um comando poderoso que permite selecionar qualquer commit espec√≠fico de um *brach* e aplic√°-lo a outro *branch*, sem precisar de uma mescla completa. A opera√ß√£o fica adicionada no hist√≥rico.

Exemplo:

**$ git cherry-pick <commit-hash>**

### 20. git archive

[     ](https://codigofonte.com.br/wp-content/uploads/2021/08/git-01.jpg)

Esse comando Git combina m√∫ltiplos arquivos em um √∫nico arquivo, como se fosse um arquivo zipado. Esse pacote pode ser aberto depois e os arquivos contidos podem ser extra√≠dos individualmente.

Exemplo:

**$ git archive ‚Äìformat zip HEAD > archive-HEAD.zip**

### 21. git blame

O comando ‚Äúdedo-duro‚Äù, blame ajuda a determinar qual usu√°rio realizou qual mudan√ßa em um determinado arquivo.

Exemplo:

**$ git blame <nome_do_arquivo>**

### 22. git tag

Tags s√£o uma boa op√ß√£o para marcar uma *branch* e evitar altera√ß√£o, principalmente em releases p√∫blicos.

Exemplo:

**$ git tag -a v1.0.0**

### 23. git diff

Para comparar dois arquivos gits ou dois *branches* **antes** de passarem por um commit ou um push, √© importante executar esse comando Git.

Exemplos:

\1.   comparando o reposit√≥rio ativo com o reposit√≥rio local: **$ git diff HEAD <nome_do_arquivo>**

\2.   comparando duas ramifica√ß√µes: **$ git diff <***branch* **de origem> <***branch* **de destino>**

### 24. git citool

Esse comando Git oferece uma alternativa gr√°fica ao commit.

Exemplo:

**$ git citool**

### 25. git whatchanged

Esse comando oferece informa√ß√µes de log, mas em formato raw.

Exemplo:

**$ git whatchanged**

Tags:

¬∑     [Git](https://www.codigofonte.com.br/tag/git)

 

5 ‚Äì GIT e GITHUB na pr√°tica

E agora vamos criar nosso reposit√≥rio... √© hora da pr√°tica!! E o que vamos fazer? Nesse momento voc√™ j√° dever√° ter instalado o GIT e tamb√©m atualizado o JAVA (üòä)

\1)   Iniciar O GIT;

\2)   Iniciar o Versionamento; e 

\3)   Criar um Commit

\4)   Transferir esse Commit para o GitHub

Vamos utilizar os comandos: GIT INIT, GIT ADD E GIT COMMIT

\1)   Criando um reposit√≥rio

Vamos criar um reposit√≥rio no nosso PC. Sugerimos criar a pasta WORSKPACE no Diret√≥rio C

 

Sobre a pasta WORKSPACE, clique com o bot√£o direito de mouse em ‚ÄúGIT BASH HERE‚Äù

 

 

Abrindo o GIT BASH, voc√™ dever√° dar, sequenciadamente, os seguintes comandos

mkdir ‚Äì GIT-e-GITHUB

cd GIT-e-GITHUB

git init

o resultado deve ser esse:

 

E como ter certeza que a pasta foi criada?

Siga o comando ls -a e resulta na tela abaixo, que mostra que dentro da pasta workspace foi gerada outra pasta e inclusive a .git 

 

 

OBS.:

Antes de mais nada precisamos criar o seu login no GIT, assim digite:

git config ‚Äìglobal user.email ‚Äú o seu e-mail de uso para o projeto‚Äù ENTER

git config ‚Äìglobal user.name SEUNOMEDEUSUARIO (no meu caso usei MARAGFTJAVA)

e tem que resultar na tela abaixo

 

Para gerar nosso reposit√≥rio com mais facilidade, vamos utilizar uma linguagem marckdown, que √© uma forma mais humana de usar uma linguagem HTML. Assim, voc√™ pode usar o TYPORA, que √© um aplicativo que vai permitir voc√™ criar arquivos em .md, dispon√≠vel para download no link https://typora.br.uptodown.com/windows/download

Feito download, dentro da pasta GIT-e-GITHUB, crie um ARQUIVO com o nome ‚ÄúGIT e GITHUB - Guia Pr√°tico para iniciantes ‚Äì WINDOWS‚Äù com a extens√£o md (Ou seja, no TYPORA)

Fazendo COMMIT

git add *

 

git commit -m ‚Äúcommit inicial‚Äù

Geramos nosso 1¬∫. COMMIT

 

Comando ls vai ajudar a mostrar os arquivos no DIR e o comando git status mostra informa√ß√µes sobre o arquivo

 

O Projeto se inicia no WORKING DIRECTORY, ou seja, no diret√≥rio de trabalho dentro do seu sistema operacional. Cada etapa finalizada vai para o STAGE AREA e depois comitar os arquivos, conforme os seguintes comandos

